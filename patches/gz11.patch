--- Connection.cc	2025-08-01 14:40:17.443495963 +0200
+++ b/gazebo/transport/Connection.cc	2025-08-01 14:50:48.798589464 +0200
@@ -56,9 +56,9 @@
 #include "gazebo/common/Console.hh"
 #include "gazebo/msgs/msgs.hh"
 
-#include "gazebo/transport/IOManager.hh"
-#include "gazebo/transport/ConnectionManager.hh"
 #include "gazebo/transport/Connection.hh"
+#include "gazebo/transport/ConnectionManager.hh"
+#include "gazebo/transport/IOManager.hh"
 
 using namespace gazebo;
 using namespace transport;
@@ -71,22 +71,19 @@
 // Version 1.52 of boost has an address::is_unspecfied function, but
 // Version 1.46.1 (installed on ubuntu) does not. So this helper function
 // is stolen from adress::is_unspecified function in boost v1.52.
-static bool addressIsUnspecified(const boost::asio::ip::address_v4 &_addr)
-{
-  return _addr.to_ulong() == 0;
+static bool addressIsUnspecified(const boost::asio::ip::address_v4 &_addr) {
+  return _addr.to_uint() == 0;
 }
 
 // Version 1.52 of boost has an address::is_loopback function, but
 // Version 1.46.1 (installed on ubuntu) does not. So this helper function
 // is stolen from adress::is_loopback function in boost v1.52.
-static bool addressIsLoopback(const boost::asio::ip::address_v4 &_addr)
-{
-  return (_addr.to_ulong() & 0xFF000000) == 0x7F000000;
+static bool addressIsLoopback(const boost::asio::ip::address_v4 &_addr) {
+  return (_addr.to_uint() & 0xFF000000) == 0x7F000000;
 }
 
 //////////////////////////////////////////////////
-Connection::Connection()
-{
+Connection::Connection() {
   this->isOpen = false;
   this->dropMsgLogged = false;
 
@@ -112,25 +109,21 @@
   // Get and set the IP white list from the GAZEBO_IP_WHITE_LIST environment
   // variable.
   char *whiteListEnv = getenv("GAZEBO_IP_WHITE_LIST");
-  if (whiteListEnv && !std::string(whiteListEnv).empty())
-  {
+  if (whiteListEnv && !std::string(whiteListEnv).empty()) {
     // Automatically add in the local addresses. This guarantees that
     // Gazebo will run properly on the local machine.
-    this->ipWhiteList = "," + this->localAddress + ",127.0.0.1,"
-      + whiteListEnv + ",";
+    this->ipWhiteList =
+        "," + this->localAddress + ",127.0.0.1," + whiteListEnv + ",";
   }
 }
 
 //////////////////////////////////////////////////
-Connection::~Connection()
-{
+Connection::~Connection() {
   this->Shutdown();
 
-  if (iomanager)
-  {
+  if (iomanager) {
     iomanager->DecCount();
-    if (iomanager->GetCount() == 0)
-    {
+    if (iomanager->GetCount() == 0) {
       this->idCounter = 0;
       delete iomanager;
       iomanager = NULL;
@@ -139,8 +132,7 @@
 }
 
 //////////////////////////////////////////////////
-bool Connection::Connect(const std::string &_host, unsigned int _port)
-{
+bool Connection::Connect(const std::string &_host, unsigned int _port) {
   boost::mutex::scoped_lock lock(this->connectMutex);
 
   std::string service = boost::lexical_cast<std::string>(_port);
@@ -150,58 +142,21 @@
   if (httpIndex != static_cast<int>(std::string::npos))
     host = _host.substr(7, _host.size() - 7);
 
-  // Resolve the host name into an IP address
-  boost::asio::ip::tcp::resolver::iterator end;
-  boost::asio::ip::tcp::resolver resolver(iomanager->GetIO());
-  boost::asio::ip::tcp::resolver::query query(host, service,
-      boost::asio::ip::resolver_query_base::numeric_service);
-  boost::asio::ip::tcp::resolver::iterator endpointIter;
-
-  try
-  {
-    endpointIter = resolver.resolve(query);
-
-    // Find the first valid IPv4 address
-    for (; endpointIter != end &&
-           !(*endpointIter).endpoint().address().is_v4(); ++endpointIter)
-    {
-    }
-
-    // Make sure we didn't run off the end of the list.
-    if (endpointIter == end)
-    {
-      gzerr << "Unable to resolve uri[" << _host << ":" << _port << "]\n";
-      return false;
-    }
-  }
-  catch(...)
-  {
-    gzerr << "Unable to resolve uri[" << host << ":" << _port << "]\n";
-    return false;
-  }
-
   this->connectError = false;
   this->remoteURI.clear();
 
-  // Use async connect so that we can use a custom timeout. This is useful
-  // when trying to detect network errors.
-  this->socket->async_connect(*endpointIter++,
-      common::weakBind(&Connection::OnConnect, this->shared_from_this(),
-        boost::asio::placeholders::error, endpointIter));
-
   // Wait for at most 60 seconds for a connection to be established.
   // The connectionCondition notification occurs in ::OnConnect.
-  if (!this->connectCondition.timed_wait(lock,
-        boost::posix_time::milliseconds(60000)) || this->connectError)
-  {
-    gzlog << "Failed to create connection to remote host["
-          << host << ":" << _port << "]\n";
+  if (!this->connectCondition.timed_wait(
+          lock, boost::posix_time::milliseconds(60000)) ||
+      this->connectError) {
+    gzlog << "Failed to create connection to remote host[" << host << ":"
+          << _port << "]\n";
     this->socket->close();
     return false;
   }
 
-  if (this->remoteURI.empty())
-  {
+  if (this->remoteURI.empty()) {
     gzerr << "Unable to connect to host[" << host << ":" << _port << "]\n";
     return false;
   }
@@ -212,8 +167,7 @@
 }
 
 //////////////////////////////////////////////////
-void Connection::Listen(unsigned int port, const AcceptCallback &_acceptCB)
-{
+void Connection::Listen(unsigned int port, const AcceptCallback &_acceptCB) {
   this->acceptCB = _acceptCB;
 
   this->acceptor = new boost::asio::ip::tcp::acceptor(iomanager->GetIO());
@@ -221,8 +175,7 @@
   this->acceptor->open(endpoint.protocol());
   this->acceptor->set_option(
       boost::asio::ip::tcp::acceptor::reuse_address(true));
-  this->acceptor->set_option(
-      boost::asio::ip::tcp::acceptor::keep_alive(true));
+  this->acceptor->set_option(boost::asio::ip::tcp::acceptor::keep_alive(true));
 
   // Enable TCP_NO_DELAY
   this->acceptor->set_option(boost::asio::ip::tcp::no_delay(true));
@@ -232,41 +185,36 @@
 
   this->acceptConn = ConnectionPtr(new Connection());
 
-  this->acceptor->async_accept(*this->acceptConn->socket,
+  this->acceptor->async_accept(
+      *this->acceptConn->socket,
       common::weakBind(&Connection::OnAccept, this->shared_from_this(),
                   boost::asio::placeholders::error));
 }
 
 //////////////////////////////////////////////////
-void Connection::OnAccept(const boost::system::error_code &e)
-{
+void Connection::OnAccept(const boost::system::error_code &e) {
   // Call the accept callback if there isn't an error
-  if (!e)
-  {
+  if (!e) {
     this->acceptConn->isOpen = true;
 
     if (!this->ipWhiteList.empty() &&
-        this->ipWhiteList.find("," +
-          this->acceptConn->GetRemoteHostname() + ",") == std::string::npos)
-    {
+        this->ipWhiteList.find("," + this->acceptConn->GetRemoteHostname() +
+                               ",") == std::string::npos) {
       gzlog << "Rejected connection from["
         << this->acceptConn->GetRemoteHostname() << "], not in white list["
         << this->ipWhiteList << "]\n";
-    }
-    else
-    {
+    } else {
       this->acceptCB(this->acceptConn);
     }
 
     // First start a new acceptor
     this->acceptConn = ConnectionPtr(new Connection());
 
-    this->acceptor->async_accept(*this->acceptConn->socket,
+    this->acceptor->async_accept(
+        *this->acceptConn->socket,
         common::weakBind(&Connection::OnAccept, this->shared_from_this(),
           boost::asio::placeholders::error));
-  }
-  else
-  {
+  } else {
     // Probably the connection was closed. No need to report an error since
     // this can happen duing a shutdown.
     if (e.value() != ECANCELED)
@@ -275,31 +223,25 @@
 }
 
 //////////////////////////////////////////////////
-void Connection::StartRead(const ReadCallback & /*_cb*/)
-{
+void Connection::StartRead(const ReadCallback & /*_cb*/) {
   gzerr << "\n\n\n\n DONT USE \n\n\n\n";
 }
 
 //////////////////////////////////////////////////
-void Connection::StopRead()
-{
-  this->readQuit = true;
-}
+void Connection::StopRead() { this->readQuit = true; }
 
 //////////////////////////////////////////////////
-void Connection::EnqueueMsg(const std::string &_buffer, bool _force)
-{
+void Connection::EnqueueMsg(const std::string &_buffer, bool _force) {
   using namespace boost::placeholders;
   this->EnqueueMsg(_buffer, boost::bind(&dummy_callback_fn, _1), 0, _force);
 }
 
 //////////////////////////////////////////////////
 void Connection::EnqueueMsg(const std::string &_buffer,
-    boost::function<void(uint32_t)> _cb, uint32_t _id, bool _force)
-{
+                            boost::function<void(uint32_t)> _cb, uint32_t _id,
+                            bool _force) {
   // Don't enqueue empty messages
-  if (_buffer.empty() || !this->IsOpen())
-  {
+  if (_buffer.empty() || !this->IsOpen()) {
     return;
   }
 
@@ -313,43 +255,34 @@
     if (this->writeQueue.empty() ||
         (this->writeCount > 0 && this->writeQueue.size() == 1) ||
         (this->writeQueue.back().size() + HEADER_LENGTH + _buffer.size() >
-         4096))
-    {
+         4096)) {
       this->writeQueue.push_back(std::string(headerBuffer) + _buffer);
       this->callbacks.push_back({std::make_pair(_cb, _id)});
-    }
-    else
-    {
+    } else {
       this->writeQueue.back() += std::string(headerBuffer) + _buffer;
       this->callbacks.back().push_back(std::make_pair(_cb, _id));
     }
   }
 
-  if (_force)
-  {
+  if (_force) {
     this->ProcessWriteQueue();
-  }
-  else
-  {
+  } else {
     // Tell the connection manager that it needs to update
     ConnectionManager::Instance()->TriggerUpdate();
   }
 }
 
 /////////////////////////////////////////////////
-void Connection::ProcessWriteQueue(bool _blocking)
-{
+void Connection::ProcessWriteQueue(bool _blocking) {
   boost::recursive_mutex::scoped_lock lock(this->writeMutex);
 
-  if (!this->IsOpen())
-  {
+  if (!this->IsOpen()) {
     return;
   }
 
   // async_write should only be called when the last async_write has
   // completed. therefore we have to check the writeCount attribute
-  if (this->writeQueue.empty() || this->writeCount > 0)
-  {
+  if (this->writeQueue.empty() || this->writeCount > 0) {
     return;
   }
 
@@ -358,24 +291,19 @@
   // Write the serialized data to the socket. We use
   // "gather-write" to send both the head and the data in
   // a single write operation
-  if (!_blocking)
-  {
-    boost::asio::async_write(*this->socket,
+  if (!_blocking) {
+    boost::asio::async_write(
+        *this->socket,
         boost::asio::buffer(this->writeQueue.front().c_str(),
           this->writeQueue.front().size()),
           common::weakBind(&Connection::OnWrite, this->shared_from_this(),
             boost::asio::placeholders::error));
-  }
-  else
-  {
-    try
-    {
+  } else {
+    try {
       boost::asio::write(*this->socket,
           boost::asio::buffer(this->writeQueue.front().c_str(),
             this->writeQueue.front().size()));
-    }
-    catch(...)
-    {
+    } catch (...) {
       this->Shutdown();
     }
 
@@ -384,23 +312,15 @@
 }
 
 //////////////////////////////////////////////////
-std::string Connection::GetLocalURI() const
-{
-  return this->localURI;
-}
+std::string Connection::GetLocalURI() const { return this->localURI; }
 
 //////////////////////////////////////////////////
-std::string Connection::GetRemoteURI() const
-{
-  return this->remoteURI;
-}
+std::string Connection::GetRemoteURI() const { return this->remoteURI; }
 
 //////////////////////////////////////////////////
-void Connection::PostWrite()
-{
+void Connection::PostWrite() {
   // Call the callbacks, if not NULL
-  if (!this->callbacks.empty())
-  {
+  if (!this->callbacks.empty()) {
     for (auto const &callback : this->callbacks.front())
       if (!callback.first.empty())
         callback.first(callback.second);
@@ -413,24 +333,21 @@
 }
 
 //////////////////////////////////////////////////
-void Connection::OnWrite(const boost::system::error_code &_e)
-{
+void Connection::OnWrite(const boost::system::error_code &_e) {
   {
     boost::recursive_mutex::scoped_lock lock(this->writeMutex);
 
     this->PostWrite();
   }
 
-  if (_e)
-  {
+  if (_e) {
     // It will reach this point if the remote connection disconnects.
     this->Shutdown();
   }
 }
 
 //////////////////////////////////////////////////
-void Connection::Shutdown()
-{
+void Connection::Shutdown() {
   if (!this->socket)
     return;
 
@@ -443,27 +360,21 @@
 }
 
 //////////////////////////////////////////////////
-bool Connection::IsOpen() const
-{
+bool Connection::IsOpen() const {
   bool result = this->socket && this->socket->is_open();
   return this->isOpen && result;
 }
 
 //////////////////////////////////////////////////
-void Connection::Close()
-{
+void Connection::Close() {
   boost::mutex::scoped_lock lock(this->socketMutex);
 
-  if (this->socket && this->socket->is_open())
-  {
-    try
-    {
+  if (this->socket && this->socket->is_open()) {
+    try {
       this->socket->close();
       boost::system::error_code ec;
       this->socket->shutdown(boost::asio::ip::tcp::socket::shutdown_both, ec);
-    }
-    catch(boost::system::system_error &e)
-    {
+    } catch (boost::system::system_error &e) {
       // This warning message is unnecessary...
       // gzwarn << "Error closing socket[" << this->id << "] ["
              // << e.what() << "]\n";
@@ -473,14 +384,10 @@
     this->socket = NULL;
   }
 
-  if (this->acceptor && this->acceptor->is_open())
-  {
-    try
-    {
+  if (this->acceptor && this->acceptor->is_open()) {
+    try {
       this->acceptor->close();
-    }
-    catch(boost::system::system_error &e)
-    {
+    } catch (boost::system::system_error &e) {
       gzwarn <<"Error closing acceptor[" << this->id << "]\n";
     }
 
@@ -494,16 +401,11 @@
 }
 
 //////////////////////////////////////////////////
-void Connection::Cancel()
-{
-  if (this->acceptor)
-  {
-    try
-    {
+void Connection::Cancel() {
+  if (this->acceptor) {
+    try {
       this->acceptor->cancel();
-    }
-    catch(boost::system::system_error &e)
-    {
+    } catch (boost::system::system_error &e) {
       gzwarn << "Connection::Cancel Error[" << e.what() << "]\n";
       // Left empty on purpose
     }
@@ -513,14 +415,10 @@
 
   {
     boost::mutex::scoped_lock lock(this->socketMutex);
-    if (this->socket && this->socket->is_open())
-    {
-      try
-      {
+    if (this->socket && this->socket->is_open()) {
+      try {
         this->socket->cancel();
-      }
-      catch(...)
-      {
+      } catch (...) {
         this->socket->close();
       }
     }
@@ -528,8 +426,7 @@
 }
 
 //////////////////////////////////////////////////
-bool Connection::Read(std::string &data)
-{
+bool Connection::Read(std::string &data) {
   bool result = false;
   char header[HEADER_LENGTH];
   std::vector<char> incoming;
@@ -542,30 +439,26 @@
   // First read the header
   this->socket->read_some(boost::asio::buffer(header), error);
 
-  if (error)
-  {
+  if (error) {
     gzerr << "Connection[" << this->id << "] Closed during Read\n";
     throw boost::system::system_error(error);
   }
 
   // Parse the header to get the size of the incoming data packet
   incoming_size = this->ParseHeader(std::string(header, HEADER_LENGTH));
-  if (incoming_size > 0)
-  {
+  if (incoming_size > 0) {
     incoming.resize(incoming_size);
 
     std::size_t len = 0;
-    do
-    {
+    do {
       // Read in the actual data
-      len += this->socket->read_some(boost::asio::buffer(&incoming[len],
-            incoming_size - len), error);
+      len += this->socket->read_some(
+          boost::asio::buffer(&incoming[len], incoming_size - len), error);
     } while (len < incoming_size && !error && !this->readQuit);
 
-    if (len != incoming_size)
-    {
-      gzerr << "Did not read everying. Read[" << len
-        << "] Needed[" << incoming_size << "]\n";
+    if (len != incoming_size) {
+      gzerr << "Did not read everying. Read[" << len << "] Needed["
+            << incoming_size << "]\n";
     }
 
     if (error)
@@ -579,62 +472,42 @@
 }
 
 //////////////////////////////////////////////////
-std::string Connection::GetLocalAddress() const
-{
-  return this->localAddress;
-}
+std::string Connection::GetLocalAddress() const { return this->localAddress; }
 
 //////////////////////////////////////////////////
-unsigned int Connection::GetLocalPort() const
-{
-  try
-  {
+unsigned int Connection::GetLocalPort() const {
+  try {
     if (this->socket && this->socket->is_open())
       return this->socket->local_endpoint().port();
     else if (this->acceptor)
       return this->acceptor->local_endpoint().port();
-  }
-  catch(...)
-  {
+  } catch (...) {
   }
 
   return 0;
 }
 
 //////////////////////////////////////////////////
-std::string Connection::GetRemoteAddress() const
-{
-  return this->remoteAddress;
-}
+std::string Connection::GetRemoteAddress() const { return this->remoteAddress; }
 
 //////////////////////////////////////////////////
-unsigned int Connection::GetRemotePort() const
-{
-  if (this->socket && this->socket->is_open())
-  {
-    try
-    {
+unsigned int Connection::GetRemotePort() const {
+  if (this->socket && this->socket->is_open()) {
+    try {
       return this->socket->remote_endpoint().port();
-    }
-    catch(...)
-    {
+    } catch (...) {
       return 0;
     }
-  }
-  else
+  } else
     return 0;
 }
 
-
-
 //////////////////////////////////////////////////
-std::size_t Connection::ParseHeader(const std::string &header)
-{
+std::size_t Connection::ParseHeader(const std::string &header) {
   std::size_t data_size = 0;
   std::istringstream is(header);
 
-  if (!(is >> std::hex >> data_size))
-  {
+  if (!(is >> std::hex >> data_size)) {
     // Header doesn't seem to be valid. Inform the caller
     boost::system::error_code error(boost::asio::error::invalid_argument);
   }
@@ -643,30 +516,21 @@
 }
 
 //////////////////////////////////////////////////
-void Connection::ReadLoop(const ReadCallback &cb)
-{
+void Connection::ReadLoop(const ReadCallback &cb) {
   std::string data;
 
   this->readQuit = false;
-  while (!this->readQuit)
-  {
-    try
-    {
-      if (this->socket->available() >= HEADER_LENGTH)
-      {
-        if (this->Read(data))
-        {
+  while (!this->readQuit) {
+    try {
+      if (this->socket->available() >= HEADER_LENGTH) {
+        if (this->Read(data)) {
           (cb)(data);
         }
-      }
-      else
-      {
+      } else {
         common::Time::MSleep(10);
         continue;
       }
-    }
-    catch(std::exception &e)
-    {
+    } catch (std::exception &e) {
       // The connection closed
       break;
     }
@@ -674,8 +538,7 @@
 }
 
 //////////////////////////////////////////////////
-boost::asio::ip::tcp::endpoint Connection::GetLocalEndpoint()
-{
+boost::asio::ip::tcp::endpoint Connection::GetLocalEndpoint() {
   boost::asio::ip::address_v4 address;
 
   // Get the GAZEBO_HOSTNAME environment variable. This will be NULL if it's not
@@ -686,51 +549,20 @@
   // set.
   char *ip = getenv("GAZEBO_IP");
 
-  // First try GAZEBO_HOSTNAME if it is set.
-  if (hostname && !std::string(hostname).empty())
-  {
-    boost::asio::ip::tcp::resolver resolver(iomanager->GetIO());
-    boost::asio::ip::tcp::resolver::query query(hostname, "");
-    boost::asio::ip::tcp::resolver::iterator iter = resolver.resolve(query);
-    boost::asio::ip::tcp::resolver::iterator end;
-
-    // Loop through the results, and stop at the first valid address.
-    while (iter != end)
-    {
-      boost::asio::ip::tcp::endpoint testEndPoint = *iter++;
-
-      // Check the end point for validity.
-      if (!addressIsUnspecified(testEndPoint.address().to_v4()))
-      {
-        address = testEndPoint.address().to_v4();
-        break;
-      }
-    }
-
-    // Complain if GAZEBO_HOSTNAME was set, but we were not able to get
-    // a valid address.
-    if (addressIsUnspecified(address))
-      gzerr << "GAZEBO_HOSTNAME[" << hostname << "] is invalid. "
-            << "We will fallback onto GAZEBO_IP.";
-  }
-
   // Try GAZEBO_IP if GAZEBO_HOSTNAME is not set or we were not able to
   // find a valid address.
-  if (ip && !std::string(ip).empty() && addressIsUnspecified(address))
-  {
-    if (!ValidateIP(ip))
-    {
+  if (ip && !std::string(ip).empty() && addressIsUnspecified(address)) {
+    if (!ValidateIP(ip)) {
       gzerr << "GAZEBO_IP environment variable with value[" << ip
             << "] is invalid. We will still try to use it, be warned.\n";
     }
 
-    address = boost::asio::ip::address_v4::from_string(ip);
+    address = boost::asio::ip::make_address_v4(ip);
   }
 
   // Try to automatically find a valid address if GAZEBO_IP and
   // GAZEBO_HOSTNAME have failed.
-  if (addressIsUnspecified(address))
-  {
+  if (addressIsUnspecified(address)) {
 #ifndef _WIN32
     // the following is *nix implementation to get the external IP of the
     // current machine.
@@ -738,8 +570,7 @@
     struct ifaddrs *ifaddr, *ifa;
 
     // Get interface addresses
-    if (getifaddrs(&ifaddr) == -1)
-    {
+    if (getifaddrs(&ifaddr) == -1) {
       perror("getifaddres");
       gzthrow("Unable to get local interface addresses");
     }
@@ -747,8 +578,7 @@
     char host[NI_MAXHOST];
 
     // Iterate over all the interface addresses
-    for (ifa = ifaddr; ifa != NULL; ifa = ifa->ifa_next)
-    {
+    for (ifa = ifaddr; ifa != NULL; ifa = ifa->ifa_next) {
       // Only consider UP interfaces
       if (!(ifa->ifa_flags & IFF_UP))
         continue;
@@ -759,22 +589,21 @@
       // \todo We currently don't handle AF_INET6 addresses. So I commented
       // out the below line, and removed AF_INET6 for the if clause.
       // if (family == AF_INET || family == AF_INET6)
-      if (family == AF_INET)
-      {
+      if (family == AF_INET) {
         int s = getnameinfo(ifa->ifa_addr,
-            (family == AF_INET) ? sizeof(struct sockaddr_in) :
-            sizeof(struct sockaddr_in6),
+                            (family == AF_INET) ? sizeof(struct sockaddr_in)
+                                                : sizeof(struct sockaddr_in6),
             host, NI_MAXHOST, NULL, 0, NI_NUMERICHOST);
 
         if (s != 0)
-          gzthrow(std::string("getnameinfo() failed[") +
-                  gai_strerror(s) + "]\n");
+          gzthrow(std::string("getnameinfo() failed[") + gai_strerror(s) +
+                  "]\n");
 
         // Validate the IP address to make sure it's a valid dotted quad.
         if (!ValidateIP(host))
           continue;
 
-        address = boost::asio::ip::address_v4::from_string(host);
+        address = boost::asio::ip::make_address_v4(host);
 
         // Also make sure that the IP address is not a loopback interface.
         if (!addressIsLoopback(address))
@@ -783,8 +612,7 @@
     }
 
     // Use a loopback interface as a fallback.
-    if (addressIsUnspecified(address))
-    {
+    if (addressIsUnspecified(address)) {
       gzwarn << "Unable to find a non-loopback interface. You will "
              << "not be able to connect to remote server.\n";
 
@@ -816,20 +644,17 @@
 
   // Now the call should succeed.
   if ((ret = GetAdaptersAddresses(AF_INET, flags, NULL, addrs, &outBufLen)) ==
-      NO_ERROR)
-  {
+        NO_ERROR) {
     // Iterate over all returned adapters, arbitrarily sticking with the
     // last non-loopback one that we find.
-    for (PIP_ADAPTER_ADDRESSES curr = addrs; curr; curr = curr->Next)
-    {
+      for (PIP_ADAPTER_ADDRESSES curr = addrs; curr; curr = curr->Next) {
       // The interface is not running.
       if (curr->OperStatus != IfOperStatusUp)
         continue;
 
       // Iterate over all unicast addresses for this adapter
       for (PIP_ADAPTER_UNICAST_ADDRESS unicast = curr->FirstUnicastAddress;
-           unicast; unicast = unicast->Next)
-      {
+             unicast; unicast = unicast->Next) {
         // Cast to get an IPv4 numeric address (the AF_INET flag used above
         // ensures that we're only going to get IPv4 address here).
         sockaddr_in* sockaddress =
@@ -851,24 +676,23 @@
         retAddr = ipv4Str;
       }
     }
-  }
-  else
-  {
+    } else {
     gzerr << "GetAdaptersAddresses() failed: " << ret << std::endl;
   }
 
   delete [] addrs;
 
-  if (retAddr == "127.0.0.1")
-  {
-    gzwarn <<
-      "Couldn't find a preferred IP via the GetAdaptersAddresses() call; "
+    if (retAddr == "127.0.0.1") {
+      gzwarn
+          << "Couldn't find a preferred IP via the GetAdaptersAddresses() "
+             "call; "
       "I'm assuming that your IP "
       "address is 127.0.0.1.  This should work for local processes, "
       "but will almost certainly not work if you have remote processes."
-      "Report to the disc-zmq development team to seek a fix." << std::endl;
+             "Report to the disc-zmq development team to seek a fix."
+          << std::endl;
   }
-  address = boost::asio::ip::address_v4::from_string(retAddr);
+    address = boost::asio::ip::make_address_v4(retAddr);
 #endif
   }
 
@@ -881,8 +705,7 @@
 }
 
 /////////////////////////////////////////////////
-bool Connection::ValidateIP(const std::string &_ip)
-{
+bool Connection::ValidateIP(const std::string &_ip) {
   struct sockaddr_in sa;
 
 #ifdef _WIN32
@@ -894,11 +717,9 @@
 }
 
 //////////////////////////////////////////////////
-boost::asio::ip::tcp::endpoint Connection::GetRemoteEndpoint() const
-{
+boost::asio::ip::tcp::endpoint Connection::GetRemoteEndpoint() const {
   boost::asio::ip::tcp::endpoint ep;
-  if (this->socket)
-  {
+  if (this->socket) {
     boost::system::error_code ec;
     ep = this->socket->remote_endpoint(ec);
     if (ec)
@@ -908,88 +729,60 @@
 }
 
 //////////////////////////////////////////////////
-std::string Connection::GetHostname(boost::asio::ip::tcp::endpoint _ep)
-{
+std::string Connection::GetHostname(boost::asio::ip::tcp::endpoint _ep) {
   std::string result;
 
   // Use the IP address if it's valid. This saves time, and is better than
   // trying to find a hostname (particularly in cases where /etc/hosts has
   // bad information).
-  if (!addressIsUnspecified(_ep.address().to_v4()))
-  {
+  if (!addressIsUnspecified(_ep.address().to_v4())) {
     result = _ep.address().to_string();
   }
   // Otherwise perform a lookup
-  else
-  {
-    boost::asio::ip::tcp::resolver resolver(iomanager->GetIO());
-    boost::asio::ip::tcp::resolver::iterator iter = resolver.resolve(_ep);
-    boost::asio::ip::tcp::resolver::iterator end;
-
-    while (iter != end)
-    {
-      result = (*iter).host_name();
-      ++iter;
-    }
-  }
 
   return result;
 }
 
 //////////////////////////////////////////////////
-std::string Connection::GetRemoteHostname() const
-{
+std::string Connection::GetRemoteHostname() const {
   return this->GetHostname(this->GetRemoteEndpoint());
 }
 
 //////////////////////////////////////////////////
-std::string Connection::GetLocalHostname()
-{
+std::string Connection::GetLocalHostname() {
   return GetHostname(GetLocalEndpoint());
 }
 
 //////////////////////////////////////////////////
-void Connection::OnConnect(const boost::system::error_code &_error,
-    boost::asio::ip::tcp::resolver::iterator /*_endPointIter*/)
-{
+void Connection::OnConnect(
+    const boost::system::error_code &_error,
+    boost::asio::ip::tcp::resolver::results_type /*_endPointIter*/) {
   // This function is called when a connection is successfully (or
   // unsuccessfully) established.
 
   boost::mutex::scoped_lock lock(this->connectMutex);
-  if (_error == boost::system::errc::success)
-  {
-    this->remoteURI = std::string("http://") + this->GetRemoteHostname()
-      + ":" + boost::lexical_cast<std::string>(this->GetRemotePort());
+  if (_error == boost::system::errc::success) {
+    this->remoteURI = std::string("http://") + this->GetRemoteHostname() + ":" +
+                      boost::lexical_cast<std::string>(this->GetRemotePort());
 
-    if (this->socket && this->socket->is_open())
-    {
+    if (this->socket && this->socket->is_open()) {
       this->remoteAddress =
         this->socket->remote_endpoint().address().to_string();
-    }
-    else
-    {
+    } else {
       this->connectError = true;
       gzerr << "Invalid socket connection\n";
     }
 
     // Notify the condition that it may proceed.
     this->connectCondition.notify_one();
-  }
-  else
-  {
+  } else {
     this->connectError = true;
     this->connectCondition.notify_one();
   }
 }
 
 //////////////////////////////////////////////////
-unsigned int Connection::GetId() const
-{
-  return this->id;
-}
+unsigned int Connection::GetId() const { return this->id; }
 
 //////////////////////////////////////////////////
-std::string Connection::GetIPWhiteList() const
-{
-  return this->ipWhiteList;
-}
+std::string Connection::GetIPWhiteList() const { return this->ipWhiteList; }
